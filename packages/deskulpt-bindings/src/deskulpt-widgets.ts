/*! Auto-generated by xtask-gen. DO NOT EDIT! */

import { invoke } from "@tauri-apps/api/core";
import * as tauriEvent from "@tauri-apps/api/event";

// =============================================================================
// Types
// =============================================================================

/**
 * The widget catalog.
 * 
 * This is a collection of all widgets discovered locally, mapped from their
 * widget IDs to their configurations. Invalid widgets are also included with
 * their error messages.
 */
export type Catalog = { [key in string]: Outcome<Config> }

/**
 * Full configuration of a Deskulpt widget.
 */
export type Config = { 
/**
 * The name of the widget.
 */
name: string; 
/**
 * The entry point of the widget.
 */
entry: string; 
/**
 * The dependencies of the widget.
 */
dependencies: { [key in string]: string } }

/**
 * Deskulpt window enum.
 */
export type DeskulptWindow = 
/**
 * The manager window.
 */
"manager" | 
/**
 * The canvas window.
 */
"canvas"

/**
 * A result-like binary outcome.
 * 
 * This represents the outcome of an operation that can either succeed with a
 * value of type `T` or fail with an error message.
 */
export type Outcome<T> = { type: "ok"; content: T } | { type: "err"; content: string }

/**
 * Event for updating the widget catalog.
 * 
 * This event is emitted from the backend to all frontend windows whenever
 * there is a change in the widget catalog.
 */
export type UpdateWidgetCatalogEvent = Catalog

// =============================================================================
// Events
// =============================================================================

function makeEvent<T>(name: string) {
  return {
    /** The name of the event. */
    name,
    /** Listen for the event. */
    listen: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.listen(name, cb, options),
    /** Listen once for the event. */
    once: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.once(name, cb, options),
    /** Emit the event to all targets. */
    emit: (payload: T) => tauriEvent.emit(name, payload),
    /** Emit the event to a specific Deskulpt window. */
    emitTo: (window: DeskulptWindow, payload: T) =>
      tauriEvent.emitTo(window, name, payload),
  };
}

export const events = {
  updateWidgetCatalog: makeEvent<UpdateWidgetCatalogEvent>("deskulpt-widgets://update-widget-catalog"),
};

// =============================================================================
// Commands
// =============================================================================

export const commands = {

  bundle: (
    ids: string[] | null,
  ) => invoke<null>("plugin:deskulpt-widgets|bundle", {
    ids,
  }),


  rescan: () => invoke<null>("plugin:deskulpt-widgets|rescan"),
};
