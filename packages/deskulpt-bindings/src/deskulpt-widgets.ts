/*! Auto-generated by xtask-gen. DO NOT EDIT! */

import { invoke } from "@tauri-apps/api/core";
import * as tauriEvent from "@tauri-apps/api/event";

// =============================================================================
// Types
// =============================================================================

/**
 * Specifies which widget(s) to bundle.
 */
export type BundleTarget = 
/**
 * Bundle all widgets in the catalog.
 */
"all" | 
/**
 * Bundle the specified widget.
 */
{ id: string } | 
/**
 * Bundle the specified widgets.
 */
{ ids: string[] }

/**
 * Deskulpt window enum.
 */
export type DeskulptWindow = 
/**
 * The manager window.
 */
"manager" | 
/**
 * The canvas window.
 */
"canvas"

/**
 * A result-like binary outcome.
 * 
 * This represents the outcome of an operation that can either succeed with a
 * value of type `T` or fail with an error message.
 */
export type Outcome<T> = { type: "ok"; content: T } | { type: "err"; content: string }

/**
 * Event for notifying the canvas to render widgets.
 * 
 * This event carries a mapping from widget IDs to their corresponding code
 * strings or bundling errors.
 */
export type RenderEvent = { [key in string]: Outcome<string> }

/**
 * Event for notifying frontends of a widgets update.
 */
export type UpdateEvent = WidgetCatalog

/**
 * The catalog of widgets.
 * 
 * This is a mapping from widget IDs to their full specifications (if valid) or
 * error messages (if invalid).
 */
export type WidgetCatalog = { [key in string]: Outcome<WidgetSpec> }

/**
 * Full widget specification resolved from manifest files.
 */
export type WidgetSpec = { 
/**
 * The name of the widget.
 */
name: string; 
/**
 * The entry point of the widget.
 */
entry: string; 
/**
 * The dependencies of the widget.
 */
dependencies: { [key in string]: string } }

// =============================================================================
// Events
// =============================================================================

function makeEvent<T>(name: string) {
  return {
    /** The name of the event. */
    name,
    /** Listen for the event. */
    listen: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.listen(name, cb, options),
    /** Listen once for the event. */
    once: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.once(name, cb, options),
    /** Emit the event to all targets. */
    emit: (payload: T) => tauriEvent.emit(name, payload),
    /** Emit the event to a specific Deskulpt window. */
    emitTo: (window: DeskulptWindow, payload: T) =>
      tauriEvent.emitTo(window, name, payload),
  };
}

export const events = {
  render: makeEvent<RenderEvent>("deskulpt-widgets://render"),
  update: makeEvent<UpdateEvent>("deskulpt-widgets://update"),
};

// =============================================================================
// Commands
// =============================================================================

export const commands = {
  /**
   * TODO
   */
  bundle: (
    target: BundleTarget,
  ) => invoke<null>("plugin:deskulpt-widgets|bundle", {
    target,
  }),

  /**
   * TODO
   */
  rescan: () => invoke<null>("plugin:deskulpt-widgets|rescan"),
};
